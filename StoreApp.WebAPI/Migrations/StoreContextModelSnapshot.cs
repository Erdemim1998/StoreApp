// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StoreApp.Data.Concrete;

#nullable disable

namespace StoreApp.WebAPI.Migrations
{
    [DbContext(typeof(StoreContext))]
    partial class StoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("StoreApp.Data.Concrete.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("StoreApp.Data.Concrete.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime(6)")
                        .HasAnnotation("Relational:JsonPropertyName", "dateAdded");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasAnnotation("Relational:JsonPropertyName", "email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "fullName");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "image");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "password");

                    b.Property<string>("PasswordConfirmed")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "passwordConfirmed");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasAnnotation("Relational:JsonPropertyName", "userName");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasAnnotation("Relational:JsonPropertyName", "user");
                });

            modelBuilder.Entity("StoreApp.Data.Concrete.BasketItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "brandId");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<float?>("Price")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "price");

                    b.Property<string>("Url")
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "url");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Baskets");
                });

            modelBuilder.Entity("StoreApp.Data.Concrete.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasAnnotation("Relational:JsonPropertyName", "brand");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Samsung"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Apple"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Casio"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Wainer"
                        });
                });

            modelBuilder.Entity("StoreApp.Data.Concrete.BrandSubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "brandId");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "subCategoryId");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("BrandSubCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 1,
                            SubCategoryId = 1
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 1,
                            SubCategoryId = 2
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 1,
                            SubCategoryId = 3
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 1,
                            SubCategoryId = 4
                        },
                        new
                        {
                            Id = 5,
                            BrandId = 1,
                            SubCategoryId = 5
                        },
                        new
                        {
                            Id = 6,
                            BrandId = 1,
                            SubCategoryId = 6
                        },
                        new
                        {
                            Id = 7,
                            BrandId = 1,
                            SubCategoryId = 7
                        },
                        new
                        {
                            Id = 8,
                            BrandId = 1,
                            SubCategoryId = 8
                        },
                        new
                        {
                            Id = 9,
                            BrandId = 1,
                            SubCategoryId = 9
                        },
                        new
                        {
                            Id = 10,
                            BrandId = 2,
                            SubCategoryId = 1
                        },
                        new
                        {
                            Id = 11,
                            BrandId = 2,
                            SubCategoryId = 2
                        },
                        new
                        {
                            Id = 12,
                            BrandId = 2,
                            SubCategoryId = 3
                        },
                        new
                        {
                            Id = 13,
                            BrandId = 2,
                            SubCategoryId = 4
                        },
                        new
                        {
                            Id = 14,
                            BrandId = 2,
                            SubCategoryId = 5
                        },
                        new
                        {
                            Id = 15,
                            BrandId = 2,
                            SubCategoryId = 6
                        },
                        new
                        {
                            Id = 16,
                            BrandId = 2,
                            SubCategoryId = 7
                        },
                        new
                        {
                            Id = 17,
                            BrandId = 2,
                            SubCategoryId = 8
                        },
                        new
                        {
                            Id = 18,
                            BrandId = 2,
                            SubCategoryId = 9
                        },
                        new
                        {
                            Id = 19,
                            BrandId = 3,
                            SubCategoryId = 11
                        },
                        new
                        {
                            Id = 20,
                            BrandId = 3,
                            SubCategoryId = 13
                        },
                        new
                        {
                            Id = 21,
                            BrandId = 4,
                            SubCategoryId = 11
                        },
                        new
                        {
                            Id = 22,
                            BrandId = 4,
                            SubCategoryId = 13
                        });
                });

            modelBuilder.Entity("StoreApp.Data.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasAnnotation("Relational:JsonPropertyName", "category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Elektronik"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Moda"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Ev, Yaşam, Kırtasiye, Ofis"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Oto, Bahçe, Yapı Market"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Anne, Bebek, Oyuncak"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Spor, Outdoor"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Kozmetik, Kişisel Bakım"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Süpermarket, Pet Shop"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Kitap, Müzik, Film, Hobi"
                        });
                });

            modelBuilder.Entity("StoreApp.Data.Concrete.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasAnnotation("Relational:JsonPropertyName", "city");
                });

            modelBuilder.Entity("StoreApp.Data.Concrete.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime(6)")
                        .HasAnnotation("Relational:JsonPropertyName", "commentDate");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "commentText");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "productId");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "userId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("StoreApp.Data.Concrete.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "address");

                    b.Property<string>("CartName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "cartName");

                    b.Property<string>("CartNumber")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "cartNumber");

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "cityId");

                    b.Property<string>("Cvc")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "cvc");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "email");

                    b.Property<string>("ExpirationMonth")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "expirationMonth");

                    b.Property<string>("ExpirationYear")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "expirationYear");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime(6)")
                        .HasAnnotation("Relational:JsonPropertyName", "orderDate");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "phoneNumber");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "userId");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("StoreApp.Data.Concrete.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "brandId");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<float?>("Price")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "price");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "subCategoryId");

                    b.Property<string>("Url")
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "url");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Products");

                    b.HasAnnotation("Relational:JsonPropertyName", "product");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 1,
                            Description = "Samsung Galaxy S24",
                            Name = "Samsung Galaxy S24",
                            Price = 68000.75f,
                            SubCategoryId = 3,
                            Url = "samsung-galaxy-s24"
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 1,
                            Description = "Samsung Galaxy S24 Ultra",
                            Name = "Samsung Galaxy S24 Ultra",
                            Price = 40000f,
                            SubCategoryId = 3,
                            Url = "samsung-galaxy-s24-ultra"
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 2,
                            Description = "Iphone 15 Pro Max",
                            Name = "Iphone 15 Pro Max",
                            Price = 86700f,
                            SubCategoryId = 3,
                            Url = "iphone-15-pro-max"
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 2,
                            Description = "Iphone 15",
                            Name = "Iphone 15",
                            Price = 62074f,
                            SubCategoryId = 3,
                            Url = "iphone-15"
                        },
                        new
                        {
                            Id = 5,
                            BrandId = 3,
                            Description = "Casio Edifice EQS-920DB-2AVUDF Erkek Kol Saati",
                            Name = "Casio Edifice EQS-920DB-2AVUDF Erkek Kol Saati",
                            Price = 4899f,
                            SubCategoryId = 13,
                            Url = "casio-edifice-eqs-320db-2avudf-erkek-kol-saati"
                        },
                        new
                        {
                            Id = 6,
                            BrandId = 4,
                            Description = "Wainer Wa.19672-F Erkek Kol Saati",
                            Name = "Wainer Wa.19672-F Erkek Kol Saati",
                            Price = 12027f,
                            SubCategoryId = 13,
                            Url = "wainer-wa.19672-f-erkek-kol-saati"
                        });
                });

            modelBuilder.Entity("StoreApp.Data.Concrete.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "productId");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "url");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("StoreApp.Data.Concrete.SubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "categoryId");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("Url")
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "url");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategories");

                    b.HasAnnotation("Relational:JsonPropertyName", "subCategory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Name = "Bilgisayar/Tablet",
                            Url = "bilgisayar-tablet"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Name = "Yazıcılar & Projeksiyon",
                            Url = "yazicilar-projeksiyon"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Name = "Telefon & Telefon Aksesuarları",
                            Url = "telefon"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            Name = "TV, Görüntü & Ses Sistemleri",
                            Url = "tv-goruntu"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            Name = "Beyaz Eşya",
                            Url = "beyaz-esya"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            Name = "Klima ve Isıtıcılar",
                            Url = "klima-isiticilar"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 1,
                            Name = "Elektrikli Ev Aletleri",
                            Url = "elektrikli-ev-aletleri"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 1,
                            Name = "Foto & Kamera",
                            Url = "foto-kamera"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 1,
                            Name = "Oyun & Oyun Konsolları",
                            Url = "oyun"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 2,
                            Name = "Kadın Giyim",
                            Url = "kadin-giyim"
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 2,
                            Name = "Kadın Aksesuar & Takı",
                            Url = "kadin-aksesuar"
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 2,
                            Name = "Erkek Giyim",
                            Url = "erkek-giyim"
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 2,
                            Name = "Erkek Aksesuar & Takı",
                            Url = "erkek-aksesuar"
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 2,
                            Name = "Altın",
                            Url = "altin"
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 2,
                            Name = "Outdoor Giyim & Ayakkabı",
                            Url = "outdoor-giyim"
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 2,
                            Name = "Ayakkabı & Çanta",
                            Url = "ayakkabi-canta"
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 2,
                            Name = "Çocuk",
                            Url = "cocuk"
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 2,
                            Name = "Yurt Dışından",
                            Url = "yurt-disindan"
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 3,
                            Name = "Sofra & Mutfak",
                            Url = "sofra-mutfak"
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 3,
                            Name = "Ev Gereçleri & Ütü Masaları",
                            Url = "ev-gerecleri"
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 3,
                            Name = "Mobilya",
                            Url = "mobilya"
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = 3,
                            Name = "Aydınlatma",
                            Url = "aydinlatma"
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = 3,
                            Name = "Ev Tekstili",
                            Url = "ev-tekstili"
                        },
                        new
                        {
                            Id = 24,
                            CategoryId = 3,
                            Name = "Yatak",
                            Url = "yatak"
                        },
                        new
                        {
                            Id = 25,
                            CategoryId = 3,
                            Name = "Ev Dekorasyon",
                            Url = "ev-dekorasyon"
                        },
                        new
                        {
                            Id = 26,
                            CategoryId = 3,
                            Name = "Ofis Mobilyaları",
                            Url = "ofis-mobilyalari"
                        },
                        new
                        {
                            Id = 27,
                            CategoryId = 3,
                            Name = "Ofis / Kırtasiye",
                            Url = "ofis-kirtasiye"
                        },
                        new
                        {
                            Id = 28,
                            CategoryId = 3,
                            Name = "Banyo & Mutfak",
                            Url = "banyo-mutfak"
                        },
                        new
                        {
                            Id = 29,
                            CategoryId = 3,
                            Name = "Elektrikli Ev Aletleri",
                            Url = "elektrikli-ev-aletleri"
                        },
                        new
                        {
                            Id = 30,
                            CategoryId = 3,
                            Name = "Yurt Dışından",
                            Url = "yurt-disindan"
                        },
                        new
                        {
                            Id = 31,
                            CategoryId = 4,
                            Name = "Yapı Market",
                            Url = "yapi-market"
                        },
                        new
                        {
                            Id = 32,
                            CategoryId = 4,
                            Name = "Hırdavat",
                            Url = "hirdavat"
                        },
                        new
                        {
                            Id = 33,
                            CategoryId = 4,
                            Name = "İş Güvenliği",
                            Url = "is-guvenligi"
                        },
                        new
                        {
                            Id = 34,
                            CategoryId = 4,
                            Name = "Yurt Dışından",
                            Url = "yurt-disindan"
                        },
                        new
                        {
                            Id = 35,
                            CategoryId = 4,
                            Name = "Banyo & Mutfak",
                            Url = "banyo-mutfak"
                        },
                        new
                        {
                            Id = 36,
                            CategoryId = 4,
                            Name = "Elektrik & Tesisat",
                            Url = "elektrik-tesisat"
                        },
                        new
                        {
                            Id = 37,
                            CategoryId = 4,
                            Name = "Bahçe",
                            Url = "bahce"
                        },
                        new
                        {
                            Id = 38,
                            CategoryId = 4,
                            Name = "Oto Aksesuar",
                            Url = "oto-aksesuar"
                        },
                        new
                        {
                            Id = 39,
                            CategoryId = 4,
                            Name = "Tüm Motosiklet Ürünleri",
                            Url = "motosiklet-urunleri"
                        },
                        new
                        {
                            Id = 40,
                            CategoryId = 5,
                            Name = "Anne Bebek Ürünleri",
                            Url = "anne-bebek-urunleri"
                        },
                        new
                        {
                            Id = 41,
                            CategoryId = 5,
                            Name = "Oyuncaklar",
                            Url = "oyuncaklar"
                        },
                        new
                        {
                            Id = 42,
                            CategoryId = 5,
                            Name = "Araç & Gereç",
                            Url = "arac-gerec"
                        },
                        new
                        {
                            Id = 43,
                            CategoryId = 5,
                            Name = "Emzirme & Bebek Beslenme",
                            Url = "emzirme-bebek"
                        },
                        new
                        {
                            Id = 44,
                            CategoryId = 5,
                            Name = "Bebek Odası & Güvenlik",
                            Url = "bebek-odasi-guvenlik"
                        },
                        new
                        {
                            Id = 45,
                            CategoryId = 5,
                            Name = "Bebek Bezi & Islak Mendil",
                            Url = "bebek-bezi-islak-mendil"
                        },
                        new
                        {
                            Id = 46,
                            CategoryId = 5,
                            Name = "Bebek Bakım & Banyo & Sağlık",
                            Url = "bebek-bakim-banyo-saglik"
                        },
                        new
                        {
                            Id = 47,
                            CategoryId = 5,
                            Name = "Giyim",
                            Url = "giyim"
                        },
                        new
                        {
                            Id = 48,
                            CategoryId = 5,
                            Name = "Yurt Dışından",
                            Url = "yurt-disindan"
                        },
                        new
                        {
                            Id = 49,
                            CategoryId = 6,
                            Name = "Tüm Spor Ürünleri",
                            Url = "spor-urunleri"
                        },
                        new
                        {
                            Id = 50,
                            CategoryId = 6,
                            Name = "Tüm Outdoor Ürünleri",
                            Url = "outdoor-urunleri"
                        },
                        new
                        {
                            Id = 51,
                            CategoryId = 6,
                            Name = "Spor Giyim - Ayakkabı",
                            Url = "spor-giyim-ayakkabi"
                        },
                        new
                        {
                            Id = 52,
                            CategoryId = 6,
                            Name = "Outdoor Giyim - Ayakkabı",
                            Url = "outdoor-giyim-ayakkabi"
                        },
                        new
                        {
                            Id = 53,
                            CategoryId = 6,
                            Name = "Fitness - Kondisyon",
                            Url = "fitness-kondisyon"
                        },
                        new
                        {
                            Id = 54,
                            CategoryId = 6,
                            Name = "Elektrikli Scooter - Paten - Kaykay",
                            Url = "elektrikli-scooter-paten-kaykay"
                        },
                        new
                        {
                            Id = 55,
                            CategoryId = 6,
                            Name = "Spor Branşları",
                            Url = "spor-branslari"
                        },
                        new
                        {
                            Id = 56,
                            CategoryId = 6,
                            Name = "Bisiklet",
                            Url = "bisiklet"
                        },
                        new
                        {
                            Id = 57,
                            CategoryId = 6,
                            Name = "Taraftar Ürünleri",
                            Url = "taraftar-urunleri"
                        },
                        new
                        {
                            Id = 58,
                            CategoryId = 6,
                            Name = "Kamp & Kampçılık Malzemeleri",
                            Url = "kamp-kampcilik"
                        },
                        new
                        {
                            Id = 59,
                            CategoryId = 6,
                            Name = "Şişme Su Ürünleri",
                            Url = "sisme-su-urunleri"
                        },
                        new
                        {
                            Id = 60,
                            CategoryId = 6,
                            Name = "Balıkçılık - Avcılık",
                            Url = "balikcilik-avcilik"
                        },
                        new
                        {
                            Id = 61,
                            CategoryId = 6,
                            Name = "Aksiyon Kamera",
                            Url = "aksiyon-kamera"
                        },
                        new
                        {
                            Id = 62,
                            CategoryId = 6,
                            Name = "Outdoor Elektronik & Optik",
                            Url = "outdoor-elektronik-optik"
                        },
                        new
                        {
                            Id = 63,
                            CategoryId = 6,
                            Name = "Tekne Malzemeleri",
                            Url = "tekne-malzemeleri"
                        },
                        new
                        {
                            Id = 64,
                            CategoryId = 6,
                            Name = "Doğa Sporları",
                            Url = "doga-sporları"
                        },
                        new
                        {
                            Id = 65,
                            CategoryId = 6,
                            Name = "Yurt Dışından",
                            Url = "yurt-disindan"
                        },
                        new
                        {
                            Id = 66,
                            CategoryId = 7,
                            Name = "Kozmetik",
                            Url = "kozmetik"
                        },
                        new
                        {
                            Id = 67,
                            CategoryId = 7,
                            Name = "Parfüm",
                            Url = "parfum"
                        },
                        new
                        {
                            Id = 68,
                            CategoryId = 7,
                            Name = "Makyaj",
                            Url = "makyaj"
                        },
                        new
                        {
                            Id = 69,
                            CategoryId = 7,
                            Name = "Cilt Bakımı",
                            Url = "cilt-bakimi"
                        },
                        new
                        {
                            Id = 70,
                            CategoryId = 7,
                            Name = "Güneş Bakım",
                            Url = "gunes-bakim"
                        },
                        new
                        {
                            Id = 71,
                            CategoryId = 7,
                            Name = "Kişisel Bakım",
                            Url = "kisisel-bakim"
                        },
                        new
                        {
                            Id = 72,
                            CategoryId = 7,
                            Name = "Ağız Bakım",
                            Url = "agiz-bakim"
                        },
                        new
                        {
                            Id = 73,
                            CategoryId = 7,
                            Name = "Tıraş Ürünleri",
                            Url = "tiras-urunleri"
                        },
                        new
                        {
                            Id = 74,
                            CategoryId = 7,
                            Name = "Duş Jeli",
                            Url = "dus-jeli"
                        },
                        new
                        {
                            Id = 75,
                            CategoryId = 7,
                            Name = "Saç Bakımı",
                            Url = "sac-bakimi"
                        },
                        new
                        {
                            Id = 76,
                            CategoryId = 7,
                            Name = "Epilasyon & Ağda",
                            Url = "epilasyon-agda"
                        },
                        new
                        {
                            Id = 77,
                            CategoryId = 7,
                            Name = "Aile Planlaması ve Cinsel Sağlık Ürünleri",
                            Url = "aile-planlamasi"
                        },
                        new
                        {
                            Id = 78,
                            CategoryId = 7,
                            Name = "Deodorant",
                            Url = "deodorant"
                        },
                        new
                        {
                            Id = 79,
                            CategoryId = 7,
                            Name = "Sıvı Sabun",
                            Url = "sivi-sabun"
                        },
                        new
                        {
                            Id = 80,
                            CategoryId = 7,
                            Name = "Kolonya",
                            Url = "kolonya"
                        },
                        new
                        {
                            Id = 81,
                            CategoryId = 7,
                            Name = "El Dezenfektanı",
                            Url = "el-dezenfektani"
                        },
                        new
                        {
                            Id = 82,
                            CategoryId = 7,
                            Name = "Maske & Eldiven",
                            Url = "maske-eldiven"
                        },
                        new
                        {
                            Id = 83,
                            CategoryId = 7,
                            Name = "Besin Takviyeleri",
                            Url = "besin-takviyeleri"
                        },
                        new
                        {
                            Id = 84,
                            CategoryId = 7,
                            Name = "Yurt Dışından",
                            Url = "yurt-disindan"
                        },
                        new
                        {
                            Id = 85,
                            CategoryId = 8,
                            Name = "Süpermarket Anasayfa",
                            Url = "supermarket-anasayfa"
                        },
                        new
                        {
                            Id = 86,
                            CategoryId = 8,
                            Name = "Deterjan & Temizlik Ürünleri",
                            Url = "deterjan-temizlik-urunleri"
                        },
                        new
                        {
                            Id = 87,
                            CategoryId = 8,
                            Name = "Bebek Bezleri ve Islak Mendiller",
                            Url = "bebek-bezleri-islak-mendiller"
                        },
                        new
                        {
                            Id = 88,
                            CategoryId = 8,
                            Name = "Kağıt Ürünleri",
                            Url = "kagit-urunleri"
                        },
                        new
                        {
                            Id = 89,
                            CategoryId = 8,
                            Name = "İçecekler",
                            Url = "icecekler"
                        },
                        new
                        {
                            Id = 90,
                            CategoryId = 8,
                            Name = "Gıda Ürünleri",
                            Url = "gida-urunleri"
                        },
                        new
                        {
                            Id = 91,
                            CategoryId = 8,
                            Name = "Petshop",
                            Url = "petshop"
                        },
                        new
                        {
                            Id = 92,
                            CategoryId = 8,
                            Name = "Ev Tüketim Malzemeleri",
                            Url = "ev-tuketim-malzemeleri"
                        },
                        new
                        {
                            Id = 93,
                            CategoryId = 8,
                            Name = "Ofis Tüketim Malzemeleri",
                            Url = "ofis-tuketim-malzemeleri"
                        },
                        new
                        {
                            Id = 94,
                            CategoryId = 8,
                            Name = "Yurt Dışından",
                            Url = "yurt-disindan"
                        },
                        new
                        {
                            Id = 95,
                            CategoryId = 9,
                            Name = "Kitap & Dergi",
                            Url = "kitap-dergi"
                        },
                        new
                        {
                            Id = 96,
                            CategoryId = 9,
                            Name = "Müzik Enstrümanları ve Ekipmanları",
                            Url = "muzik-enstrumanlari-ekipmanlari"
                        },
                        new
                        {
                            Id = 97,
                            CategoryId = 9,
                            Name = "Drone Multikopter",
                            Url = "drone-multikopter"
                        },
                        new
                        {
                            Id = 98,
                            CategoryId = 9,
                            Name = "Hobi & Oyun",
                            Url = "hobi-oyun"
                        },
                        new
                        {
                            Id = 99,
                            CategoryId = 9,
                            Name = "Film",
                            Url = "film"
                        },
                        new
                        {
                            Id = 100,
                            CategoryId = 9,
                            Name = "Yurt Dışından",
                            Url = "yurt-disindan"
                        },
                        new
                        {
                            Id = 101,
                            CategoryId = 9,
                            Name = "Müzik (Medya)",
                            Url = "muzik"
                        },
                        new
                        {
                            Id = 102,
                            CategoryId = 9,
                            Name = "Dijital Ürünler",
                            Url = "dijital-urunler"
                        },
                        new
                        {
                            Id = 103,
                            CategoryId = 9,
                            Name = "Ön Ödemeli Kart",
                            Url = "on-odemeli-Kart"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("StoreApp.Data.Concrete.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("StoreApp.Data.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("StoreApp.Data.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("StoreApp.Data.Concrete.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreApp.Data.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("StoreApp.Data.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StoreApp.Data.Concrete.BasketItem", b =>
                {
                    b.HasOne("StoreApp.Data.Concrete.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("StoreApp.Data.Concrete.BrandSubCategory", b =>
                {
                    b.HasOne("StoreApp.Data.Concrete.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreApp.Data.Concrete.SubCategory", "SubCategory")
                        .WithMany()
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("StoreApp.Data.Concrete.Comment", b =>
                {
                    b.HasOne("StoreApp.Data.Concrete.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreApp.Data.Concrete.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StoreApp.Data.Concrete.OrderItem", b =>
                {
                    b.HasOne("StoreApp.Data.Concrete.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreApp.Data.Concrete.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StoreApp.Data.Concrete.Product", b =>
                {
                    b.HasOne("StoreApp.Data.Concrete.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreApp.Data.Concrete.SubCategory", "SubCategory")
                        .WithMany()
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("StoreApp.Data.Concrete.ProductImage", b =>
                {
                    b.HasOne("StoreApp.Data.Concrete.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("StoreApp.Data.Concrete.SubCategory", b =>
                {
                    b.HasOne("StoreApp.Data.Concrete.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });
#pragma warning restore 612, 618
        }
    }
}
